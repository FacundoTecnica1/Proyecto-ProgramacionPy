"""
Instalador Autom√°tico desde GitHub
Descarga el proyecto completo y ejecuta la instalaci√≥n
"""

import requests
import zipfile
import os
import subprocess
import sys
import tempfile
from pathlib import Path
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import shutil

class InstaladorGitHub:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ü¶ñ Instalador Autom√°tico - Juego Dinosaurio")
        self.root.geometry("600x500")
        self.root.resizable(False, False)
        
        # Variables
        self.descargando = False
        self.proyecto_dir = None
        self.github_url = "https://github.com/FacundoTecnica1/Proyecto-ProgramacionPy/archive/refs/heads/main.zip"
        
        self.setup_ui()
        
    def setup_ui(self):
        # Frame principal
        main_frame = tk.Frame(self.root, padx=20, pady=20)
        main_frame.pack(fill='both', expand=True)
        
        # T√≠tulo
        title_label = tk.Label(main_frame, 
                              text="ü¶ñ INSTALADOR AUTOM√ÅTICO DESDE GITHUB",
                              font=("Arial", 16, "bold"),
                              fg="#2E8B57")
        title_label.pack(pady=(0, 20))
        
        # Descripci√≥n
        desc_text = """¬°Instalaci√≥n completamente autom√°tica!

Este instalador har√° todo por ti:
üåê Descarga el proyecto completo desde GitHub
üì¶ Extrae todos los archivos autom√°ticamente
üîß Ejecuta el instalador premium con interfaz gr√°fica
üéÆ Crea el ejecutable del juego listo para usar

Solo presiona el bot√≥n y espera..."""
        
        desc_label = tk.Label(main_frame, text=desc_text,
                             font=("Arial", 11),
                             justify=tk.LEFT,
                             bg="#f0f0f0",
                             relief="groove",
                             padx=15, pady=15)
        desc_label.pack(fill='x', pady=(0, 20))
        
        # Informaci√≥n del proyecto
        info_frame = tk.LabelFrame(main_frame, text="Informaci√≥n del Proyecto", 
                                  font=("Arial", 10, "bold"))
        info_frame.pack(fill='x', pady=(0, 20))
        
        info_text = """üìÅ Repositorio: FacundoTecnica1/Proyecto-ProgramacionPy
üåê URL: https://github.com/FacundoTecnica1/Proyecto-ProgramacionPy
üìä Tama√±o: ~50 MB (aproximado)
‚è±Ô∏è Tiempo estimado: 5-15 minutos"""
        
        info_label = tk.Label(info_frame, text=info_text,
                             font=("Arial", 9),
                             justify=tk.LEFT,
                             padx=10, pady=10)
        info_label.pack(anchor='w')
        
        # Bot√≥n principal
        self.btn_instalar = tk.Button(main_frame,
                                     text="üöÄ DESCARGAR E INSTALAR AUTOM√ÅTICAMENTE",
                                     font=("Arial", 12, "bold"),
                                     bg="#4CAF50",
                                     fg="white",
                                     pady=15,
                                     command=self.iniciar_descarga)
        self.btn_instalar.pack(fill='x', pady=(0, 20))
        
        # Frame de progreso
        progress_frame = tk.LabelFrame(main_frame, text="Progreso", 
                                      font=("Arial", 10, "bold"))
        progress_frame.pack(fill='both', expand=True)
        
        # Barra de progreso
        self.progress = ttk.Progressbar(progress_frame, mode='determinate', maximum=100)
        self.progress.pack(fill='x', padx=10, pady=(10, 5))
        
        # Etiqueta de porcentaje
        self.percentage_label = tk.Label(progress_frame, text="0%",
                                        font=("Arial", 10, "bold"),
                                        fg="#2E8B57")
        self.percentage_label.pack(pady=(0, 5))
        
        # Estado actual
        self.status_label = tk.Label(progress_frame, text="Listo para descargar",
                                    font=("Arial", 10),
                                    fg="#666666")
        self.status_label.pack(pady=(0, 10))
        
        # √Årea de log
        self.log_text = tk.Text(progress_frame, height=8, 
                               font=("Consolas", 9),
                               bg="#f8f9fa", fg="#333333")
        self.log_text.pack(fill='both', expand=True, padx=10, pady=(0, 10))
        
        # Scrollbar para el log
        scrollbar = tk.Scrollbar(self.log_text)
        scrollbar.pack(side='right', fill='y')
        self.log_text.config(yscrollcommand=scrollbar.set)
        scrollbar.config(command=self.log_text.yview)
        
    def log(self, mensaje):
        """Agregar mensaje al log"""
        self.log_text.insert(tk.END, f"{mensaje}\n")
        self.log_text.see(tk.END)
        self.root.update()
        
    def actualizar_progreso(self, porcentaje, mensaje):
        """Actualizar progreso y estado"""
        self.progress['value'] = porcentaje
        self.percentage_label.config(text=f"{porcentaje}%")
        self.status_label.config(text=mensaje)
        self.root.update()
        
    def descargar_archivo(self, url, destino):
        """Descargar archivo con progreso"""
        try:
            self.log(f"üåê Descargando desde: {url}")
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            total_size = int(response.headers.get('content-length', 0))
            downloaded = 0
            
            with open(destino, 'wb') as file:
                for chunk in response.iter_content(chunk_size=8192):
                    if chunk:
                        file.write(chunk)
                        downloaded += len(chunk)
                        
                        if total_size > 0:
                            porcentaje = int((downloaded / total_size) * 20)  # 20% para descarga
                            self.actualizar_progreso(porcentaje, f"Descargando... {downloaded//1024//1024}MB")
                        
            self.log(f"‚úÖ Descarga completada: {destino}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Error descargando: {str(e)}")
            return False
    
    def extraer_zip(self, zip_path, destino):
        """Extraer archivo ZIP"""
        try:
            self.actualizar_progreso(25, "Extrayendo archivos...")
            self.log(f"üì¶ Extrayendo: {zip_path}")
            
            with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                zip_ref.extractall(destino)
                
            self.actualizar_progreso(40, "Extracci√≥n completada")
            self.log(f"‚úÖ Archivos extra√≠dos en: {destino}")
            return True
            
        except Exception as e:
            self.log(f"‚ùå Error extrayendo: {str(e)}")
            return False
    
    def encontrar_proyecto(self, directorio):
        """Encontrar la carpeta del proyecto extra√≠da"""
        for item in os.listdir(directorio):
            item_path = os.path.join(directorio, item)
            if os.path.isdir(item_path) and "Proyecto-ProgramacionPy" in item:
                return item_path
        return None
    
    def ejecutar_instalador_premium(self, proyecto_dir):
        """Ejecutar el instalador premium del proyecto"""
        try:
            self.actualizar_progreso(50, "Preparando instalador premium...")
            
            instalador_path = os.path.join(proyecto_dir, "instalador", "instalador_premium.py")
            
            if not os.path.exists(instalador_path):
                raise Exception(f"No se encontr√≥ el instalador en: {instalador_path}")
            
            self.log(f"üöÄ Ejecutando instalador premium...")
            self.actualizar_progreso(60, "Iniciando instalador gr√°fico...")
            
            # Ejecutar el instalador premium
            proceso = subprocess.Popen([sys.executable, instalador_path], 
                                     cwd=proyecto_dir,
                                     stdout=subprocess.PIPE,
                                     stderr=subprocess.PIPE,
                                     text=True)
            
            self.log("üéÆ Instalador premium iniciado")
            self.log("üìã Sigue las instrucciones en la nueva ventana")
            
            self.actualizar_progreso(100, "Instalador premium ejecut√°ndose...")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Error ejecutando instalador: {str(e)}")
            return False
    
    def proceso_completo(self):
        """Proceso completo de descarga e instalaci√≥n"""
        try:
            self.descargando = True
            self.btn_instalar.config(state="disabled", text="‚è≥ Descargando...")
            
            self.log("üöÄ INICIANDO DESCARGA AUTOM√ÅTICA DESDE GITHUB")
            self.log("=" * 60)
            
            # Crear directorio temporal
            temp_dir = tempfile.mkdtemp(prefix="juego_dinosaurio_")
            self.log(f"üìÅ Directorio temporal: {temp_dir}")
            
            # Descargar archivo ZIP
            zip_path = os.path.join(temp_dir, "proyecto.zip")
            if not self.descargar_archivo(self.github_url, zip_path):
                raise Exception("Error descargando el proyecto")
            
            # Extraer archivo
            if not self.extraer_zip(zip_path, temp_dir):
                raise Exception("Error extrayendo el proyecto")
            
            # Encontrar la carpeta del proyecto
            self.proyecto_dir = self.encontrar_proyecto(temp_dir)
            if not self.proyecto_dir:
                raise Exception("No se encontr√≥ la carpeta del proyecto")
            
            self.log(f"üìÇ Proyecto encontrado: {self.proyecto_dir}")
            
            # Ejecutar instalador premium
            if not self.ejecutar_instalador_premium(self.proyecto_dir):
                raise Exception("Error ejecutando el instalador premium")
            
            self.log("=" * 60)
            self.log("üéâ ¬°PROCESO COMPLETADO CON √âXITO!")
            self.log("")
            self.log("üìã El instalador premium se ha abierto en una nueva ventana")
            self.log("üéÆ Sigue las instrucciones para completar la instalaci√≥n")
            self.log(f"üìÅ Proyecto guardado en: {self.proyecto_dir}")
            
            messagebox.showinfo("¬°√âxito!",
                              "üéâ ¬°Descarga completada!\n\n"
                              "‚Ä¢ Proyecto descargado desde GitHub\n"
                              "‚Ä¢ Instalador premium iniciado\n"
                              "‚Ä¢ Sigue las instrucciones en la nueva ventana\n\n"
                              "¬°Ya casi tienes tu juego listo!")
            
        except Exception as e:
            self.log(f"‚ùå ERROR: {str(e)}")
            self.actualizar_progreso(0, "Error en el proceso")
            messagebox.showerror("Error", f"Error durante la descarga:\n{str(e)}")
            
        finally:
            self.descargando = False
            self.btn_instalar.config(state="normal", text="üöÄ DESCARGAR E INSTALAR AUTOM√ÅTICAMENTE")
    
    def iniciar_descarga(self):
        """Iniciar descarga en hilo separado"""
        if self.descargando:
            return
            
        # Verificar conexi√≥n a internet
        try:
            requests.get("https://www.google.com", timeout=5)
        except:
            messagebox.showerror("Sin conexi√≥n", 
                               "‚ùå No hay conexi√≥n a internet.\n\n"
                               "Verifica tu conexi√≥n y vuelve a intentar.")
            return
        
        respuesta = messagebox.askyesno("Confirmar Descarga",
                                       "üåê ¬øDescargar e instalar desde GitHub?\n\n"
                                       "üìä Tama√±o: ~50 MB\n"
                                       "‚è±Ô∏è Tiempo: 5-15 minutos\n"
                                       "üìÅ Se crear√° en directorio temporal\n\n"
                                       "¬øContinuar?")
        if respuesta:
            self.log_text.delete(1.0, tk.END)
            threading.Thread(target=self.proceso_completo, daemon=True).start()
    
    def run(self):
        """Ejecutar la aplicaci√≥n"""
        self.root.mainloop()

def main():
    # Verificar e instalar dependencias necesarias
    try:
        import requests
    except ImportError:
        print("Instalando requests...")
        subprocess.run([sys.executable, "-m", "pip", "install", "requests"])
        import requests
    
    app = InstaladorGitHub()
    app.run()

if __name__ == "__main__":
    main()